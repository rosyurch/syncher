{"version":3,"sources":["Reqs.jsx","Synchs.jsx","App.js","serviceWorker.js","index.js"],"names":["Ul","styled","ul","Li","li","SmallText","span","Reqs","props","requests","map","request","key","name","status","time","Editor","div","Info","H","h3","Input","input","Links","A","a","Synchs","useState","query","setQuery","tourns","type","placeholder","onChange","event","target","value","filter","tourn","nameTime","toLowerCase","includes","editors","questions","price","split","slice","edit","href","link","applicationAppealLink","Wrap","Div","Upd","Header","header","App","setTourns","setRequests","lastUpd","setLastUpd","getData","fetch","res","json","data","JSON","parse","files","content","updated","yourReqs","synchs","u","Date","getHours","getMinutes","toString","length","getSeconds","getDate","getMonth","getFullYear","useEffect","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fe63ca8.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Ul = styled.ul`\n    margin: 20px 0;\n    padding: 0;\n    list-style-type: none;\n`;\n\nconst Li = styled.li`\n    margin: 10px 5px;\n    padding: 5px;\n    border: 1px solid goldenrod;\n    border-radius: 20px;\n    color: #99f;\n`;\n\nconst SmallText = styled.span`\n    font-size: 0.94em;\n    color: #fff;\n`;\n\nfunction Reqs(props) {\n    const { requests } = props;\n    return (\n        <Ul>\n            Заявки:\n            {requests.map(request => (\n                <Li key={request.name}>\n                    <SmallText>{request.name}</SmallText>\n                    <br />\n                    {request.status}\n                    <br />\n                    <SmallText>{request.time}</SmallText>\n                </Li>\n            ))}\n        </Ul>\n    );\n}\n\nexport default Reqs;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nconst Ul = styled.ul`\n    margin: 20px 0 0 0;\n    padding: 0;\n    list-style-type: none;\n`;\n\nconst Li = styled.li`\n    margin: 10px 5px 0 5px;\n    padding: 5px;\n    border: 1px solid goldenrod;\n    border-radius: 20px;\n`;\n\nconst Editor = styled.div`\n    font-size: 0.9em;\n    width: 60%;\n    margin: 0 auto;\n    text-align: left;\n    @media (max-width: 700px) {\n        width: 95%;\n    }\n`;\n\nconst Info = styled.div`\n    color: goldenrod;\n    font-weight: 500;\n`;\n\nconst H = styled.h3`\n    margin: 0;\n    padding: 0;\n`;\n\nconst Input = styled.input`\n    background-color: #282c34;\n    color: #fff;\n    border-radius: 20px;\n    border: 2px solid goldenrod;\n    padding: 5px 10px;\n    font-size: 1.1em;\n`;\n\nconst Links = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n`;\n\nconst A = styled.a`\n    text-decoration: none;\n    color: #99f;\n    &:hover,\n    :active {\n        background-color: #fff;\n        color: #000;\n    }\n`;\n\nfunction Synchs(props) {\n    const [query, setQuery] = useState('');\n\n    const { tourns } = props;\n\n    return (\n        <>\n            <label>\n                <Input\n                    type=\"text\"\n                    placeholder=\"SEARCH\"\n                    onChange={event => {\n                        setQuery(event.target.value);\n                    }}\n                />\n            </label>\n            <Ul>\n                {tourns\n                    .filter(tourn => tourn.nameTime.toLowerCase().includes(query.toLowerCase()) || tourn.editors.toLowerCase().includes(query.toLowerCase()))\n                    .map(tourn => (\n                        <Li key={tourn.nameTime}>\n                            <H>{tourn.nameTime}</H>\n                            <Info>\n                                {tourn.type} / {tourn.questions} / {tourn.price}\n                            </Info>\n                            <div>\n                                {tourn.editors\n                                    .split(')')\n                                    .slice(0, -1)\n                                    .map(edit => (\n                                        <Editor key={edit}>{edit ? edit + ')' : ''}</Editor>\n                                    ))}\n                            </div>\n                            <Links>\n                                <A href={tourn.link}>Link </A>\n                                {tourn.applicationAppealLink && <A href={tourn.applicationAppealLink}>Заявка/апель</A>}\n                            </Links>\n                        </Li>\n                    ))}\n            </Ul>\n        </>\n    );\n}\n\nexport default Synchs;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Reqs from './Reqs';\nimport Synchs from './Synchs';\n\nconst Wrap = styled.div`\n    background-color: #282c34;\n`;\n\nconst Div = styled.div`\n    color: #fff;\n    text-align: center;\n    background-color: #282c34;\n    min-height: 100vh;\n    @media (min-width: 900px) {\n        width: 70%;\n        margin: 0 auto;\n    }\n`;\n\nconst Upd = styled.div`\n    margin-right: 10px;\n    text-align: right;\n    font-size: 1em;\n`;\n\nconst Header = styled.header`\n    font-size: 2em;\n`;\n\nfunction App() {\n    const [tourns, setTourns] = useState([]);\n    const [requests, setRequests] = useState([]);\n    const [lastUpd, setLastUpd] = useState('');\n\n    const getData = async () => {\n        const res = await fetch('https://api.github.com/gists/c3f3f735a28b010bfcbff2ecf56c72a9');\n        const data = await res.json();\n        const { updated, yourReqs, synchs } = JSON.parse(data.files['chgk-data.json'].content);\n        const u = new Date(updated);\n\n        setLastUpd(\n            `${u.getHours()}:${u.getMinutes().toString().length < 2 ? '0' + u.getMinutes() : u.getMinutes()}:${u.getSeconds()} ${u.getDate()}-${u.getMonth() +\n                1}-${u.getFullYear()}`\n        );\n        setRequests(yourReqs);\n        setTourns(synchs);\n    };\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    return (\n        <Wrap>\n            <Div className=\"App\">\n                <Header className=\"App-header\">Synchs</Header>\n                <Upd>Last update: {lastUpd}</Upd>\n                <hr />\n                <main>\n                    <Reqs requests={requests} />\n                    <Synchs tourns={tourns} />\n                </main>\n            </Div>\n        </Wrap>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}