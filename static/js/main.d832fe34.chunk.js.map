{"version":3,"sources":["Synch.jsx","Synchs.jsx","App.js","serviceWorker.js","index.js"],"names":["Li","styled","li","Editor","div","Info","H","h3","Links","A","a","Synch","props","nameTime","type","questions","price","editors","link","applicationAppealLink","split","slice","map","edit","key","href","target","rel","Ul","ul","Input","input","InputDate","now","Date","Synchs","useState","query","setQuery","endDate","setEndDate","tourns","aria-label","placeholder","onChange","event","value","filter","tourn","toLowerCase","includes","Wrap","Div","Upd","Header","header","months","января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря","App","setTourns","lastUpd","setLastUpd","getData","fetch","res","json","data","JSON","parse","files","content","updated","synchs","u","forEach","s","formattedEndDate","lastIndexOf","trim","monthLiteral","monthNuber","replace","dateFinal","reverse","join","getHours","getMinutes","toString","length","getSeconds","getDate","getMonth","getFullYear","useEffect","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d832fe34.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Li = styled.li`\n    margin: 10px 5px 0 5px;\n    padding: 5px;\n    border: 1px solid goldenrod;\n    border-radius: 20px;\n`;\n\nconst Editor = styled.div`\n    font-size: 0.9em;\n    width: 60%;\n    margin: 0 auto;\n    text-align: left;\n    @media (max-width: 700px) {\n        width: 95%;\n    }\n`;\n\nconst Info = styled.div`\n    color: goldenrod;\n    font-weight: 500;\n`;\n\nconst H = styled.h3`\n    margin: 0;\n    padding: 0;\n`;\n\nconst Links = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n`;\n\nconst A = styled.a`\n    text-decoration: none;\n    color: #99f;\n    &:hover,\n    :active {\n        background-color: #fff;\n        color: #000;\n    }\n`;\n\nfunction Synch(props) {\n    const { nameTime, type, questions, price, editors, link, applicationAppealLink } = props;\n    return (\n        <Li>\n            <H>{nameTime}</H>\n            <Info>\n                {type} / {questions} / {price}\n            </Info>\n            <div>\n                {editors\n                    .split(')')\n                    .slice(0, -1)\n                    .map(edit => (\n                        <Editor key={edit}>{edit ? edit + ')' : ''}</Editor>\n                    ))}\n            </div>\n            <Links>\n                <A href={link} target=\"_blank\" rel=\"noreferrer\">\n                    Link\n                </A>\n                {applicationAppealLink && (\n                    <A target=\"_blank\" rel=\"noreferrer\" href={applicationAppealLink}>\n                        Заявка/апель\n                    </A>\n                )}\n            </Links>\n        </Li>\n    );\n}\n\nexport default Synch;\n","import React, { useState } from 'react';\nimport Synch from './Synch';\nimport styled from 'styled-components';\n\nconst Ul = styled.ul`\n    margin: 20px 0 0 0;\n    padding: 0;\n    list-style-type: none;\n`;\n\nconst Input = styled.input`\n    margin-right: 3em;\n    background-color: #282c34;\n    color: #fff;\n    border-radius: 20px;\n    border: 2px solid goldenrod;\n    padding: 5px 10px;\n    font-size: 1.1em;\n    @media (max-width: 700px) {\n        margin-right: 0;\n        margin-bottom: 1em;\n    }\n`;\n\nconst InputDate = styled.input`\n    background-color: #282c34;\n    color: #bbb;\n    border-radius: 20px;\n    border: 2px solid goldenrod;\n    padding: 5px 10px;\n    font-size: 1.4em;\n`;\n\nconst now = new Date();\n\nfunction Synchs(props) {\n    const [query, setQuery] = useState('');\n    const [endDate, setEndDate] = useState(now);\n\n    const { tourns } = props;\n\n    return (\n        <>\n            <form>\n                <Input\n                    aria-label=\"text search input\"\n                    type=\"text\"\n                    placeholder=\"SEARCH\"\n                    onChange={event => {\n                        setQuery(event.target.value);\n                    }}\n                />\n\n                <InputDate\n                    aria-label=\"date filtering\"\n                    type=\"date\"\n                    onChange={event => {\n                        if (event.target.value === '') setEndDate(now);\n                        else setEndDate(new Date(event.target.value));\n                    }}\n                />\n            </form>\n            <Ul>\n                {tourns\n                    .filter(\n                        tourn =>\n                            tourn.endDate > endDate &&\n                            (tourn.nameTime.toLowerCase().includes(query.toLowerCase()) || tourn.editors.toLowerCase().includes(query.toLowerCase()))\n                    )\n                    .map(tourn => (\n                        <Synch {...tourn} key={tourn.nameTime} />\n                    ))}\n            </Ul>\n        </>\n    );\n}\n\nexport default Synchs;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Synchs from './Synchs';\n\nconst Wrap = styled.div`\n    background-color: #282c34;\n`;\n\nconst Div = styled.div`\n    color: #fff;\n    text-align: center;\n    background-color: #282c34;\n    min-height: 100vh;\n    @media (min-width: 900px) {\n        width: 70%;\n        margin: 0 auto;\n    }\n`;\n\nconst Upd = styled.div`\n    margin-right: 10px;\n    text-align: right;\n    font-size: 1em;\n`;\n\nconst Header = styled.header`\n    font-size: 2em;\n`;\n\nconst months = {\n    января: '01',\n    февраля: '02',\n    марта: '03',\n    апреля: '04',\n    мая: '05',\n    июня: '06',\n    июля: '07',\n    августа: '08',\n    сентября: '09',\n    октября: '10',\n    ноября: '11',\n    декабря: '12',\n};\n\nfunction App() {\n    const [tourns, setTourns] = useState([]);\n    const [lastUpd, setLastUpd] = useState('');\n\n    const getData = async () => {\n        const res = await fetch('https://api.github.com/gists/c3f3f735a28b010bfcbff2ecf56c72a9');\n        const data = await res.json();\n        const { updated, synchs } = JSON.parse(data.files['chgk-data.json'].content);\n        const u = new Date(updated);\n\n        synchs.forEach(s => {\n            const endDateString = s.nameTime\n                .slice(s.nameTime.lastIndexOf('(') + 1, s.nameTime.lastIndexOf(')'))\n                .split('-')[1]\n                .trim();\n            const formattedEndDate = endDateString.split(' '); //['28', 'июля', '2019']\n            const monthLiteral = formattedEndDate[1]; // 'июля'\n            const monthNuber = monthLiteral.replace(monthLiteral, months[monthLiteral]); // 'июля' -> '07'\n            const dateFinal = [formattedEndDate[0], monthNuber, formattedEndDate[2]].reverse().join('-'); // '2019-07-28'\n            s.endDate = new Date(dateFinal);\n        });\n\n        setLastUpd(\n            `${u.getHours()}:${u.getMinutes().toString().length < 2 ? '0' + u.getMinutes() : u.getMinutes()}:${u.getSeconds()} ${u.getDate()}-${u.getMonth() +\n                1}-${u.getFullYear()}`\n        );\n        setTourns(synchs);\n    };\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    return (\n        <Wrap>\n            <Div className=\"App\">\n                <Header className=\"App-header\">Synchs</Header>\n                <Upd>Last update: {lastUpd}</Upd>\n                <hr />\n                <main>\n                    <Synchs tourns={tourns} />\n                </main>\n            </Div>\n        </Wrap>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}