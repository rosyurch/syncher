{"version":3,"sources":["Synch.tsx","Synchs.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Synch","nameTime","type","questions","price","editors","link","applicationAppealLink","className","split","slice","map","edit","key","href","target","rel","now","Date","Synchs","tourns","useState","query","setQuery","endDate","setEndDate","aria-label","placeholder","onChange","event","value","filter","tourn","toLowerCase","includes","months","января","февраля","марта","апреля","мая","июня","июля","августа","сентября","октября","ноября","декабря","App","setTourns","lastUpd","setLastUpd","useEffect","a","async","fetch","res","json","data","JSON","parse","files","content","updated","synchs","u","forEach","s","lastIndexOf","formattedEndDate","trim","monthLiteral","monthNuber","replace","dateFinal","join","getHours","getMinutes","toString","length","getSeconds","getDate","getMonth","getFullYear","getData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7d0e712.chunk.js","sourcesContent":["import React from 'react';\nimport './synch.css';\n\ntype Tourn = {\n    applicationAppealLink: string | null;\n    editors: string;\n    link: string;\n    nameTime: string;\n    price: string;\n    questions: string;\n    type: string;\n};\n\nfunction Synch({ nameTime, type, questions, price, editors, link, applicationAppealLink }: Tourn) {\n    return (\n        <li className=\"list-item\">\n            <h3 className=\"header\">{nameTime}</h3>\n            <div className=\"info\">\n                {type} / {questions} / {price}\n            </div>\n            <div>\n                {editors\n                    .split(')')\n                    .slice(0, -1)\n                    .map(edit => (\n                        <div className=\"editor\" key={edit}>\n                            {edit ? edit + ')' : ''}\n                        </div>\n                    ))}\n            </div>\n            <div className=\"links\">\n                <a className=\"link\" href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n                    Link\n                </a>\n                {applicationAppealLink && (\n                    <a className=\"link\" target=\"_blank\" rel=\"noopener noreferrer\" href={applicationAppealLink}>\n                        Заявка/апель\n                    </a>\n                )}\n            </div>\n        </li>\n    );\n}\n\nexport default Synch;\n","import React, { useState } from 'react';\nimport Synch from './Synch';\nimport './synchs.css';\n\nconst now = new Date();\n\nfunction Synchs({ tourns }) {\n    // todo: fix this `any`\n    const [query, setQuery] = useState('');\n    const [endDate, setEndDate] = useState(now);\n\n    // const { tourns } = props;\n\n    return (\n        <>\n            <form>\n                <input\n                    className=\"input\"\n                    aria-label=\"text search input\"\n                    type=\"text\"\n                    placeholder=\"SEARCH\"\n                    onChange={event => {\n                        setQuery(event.target.value);\n                    }}\n                />\n\n                <input\n                    className=\"input-date\"\n                    aria-label=\"date filtering\"\n                    type=\"date\"\n                    onChange={event => {\n                        if (event.target.value === '') setEndDate(now);\n                        else setEndDate(new Date(event.target.value));\n                    }}\n                />\n            </form>\n            <ul className=\"ul\">\n                {tourns\n                    .filter(\n                        tourn =>\n                            tourn.endDate > endDate &&\n                            (tourn.nameTime.toLowerCase().includes(query.toLowerCase()) || tourn.editors.toLowerCase().includes(query.toLowerCase()))\n                    )\n                    .map(tourn => (\n                        <Synch {...tourn} key={tourn.nameTime} />\n                    ))}\n            </ul>\n        </>\n    );\n}\n\nexport default Synchs;\n","import React, { useState, useEffect } from 'react';\nimport Synchs from './Synchs';\nimport './app.css';\n\nconst months = {\n    января: '01',\n    февраля: '02',\n    марта: '03',\n    апреля: '04',\n    мая: '05',\n    июня: '06',\n    июля: '07',\n    августа: '08',\n    сентября: '09',\n    октября: '10',\n    ноября: '11',\n    декабря: '12',\n};\n\nfunction App() {\n    // maybe to fix any prop add some generics\n    const [tourns, setTourns] = useState([]);\n    const [lastUpd, setLastUpd] = useState('');\n\n    const getData = async () => {\n        const res = await fetch('https://api.github.com/gists/2be45373cfe2010ebc4581abac7cb3cf');\n        const data = await res.json();\n        const { updated, synchs } = JSON.parse(data.files['chgk.json'].content);\n        const u = new Date(updated);\n\n        // manipulation for date conversion\n        synchs.forEach(s => {\n            if (s.nameTime.slice(s.nameTime.lastIndexOf('(') + 1, s.nameTime.lastIndexOf(')')).split('-')[1]) {\n                const endDateString = s.nameTime\n                    .slice(s.nameTime.lastIndexOf('(') + 1, s.nameTime.lastIndexOf(')'))\n                    .split('-')[1]\n                    .trim();\n\n                const formattedEndDate = endDateString.split(' '); //['28', 'июля', '2019']\n                const monthLiteral = formattedEndDate[1]; // 'июля'\n                const monthNuber = monthLiteral.replace(monthLiteral, months[monthLiteral]); // 'июля' -> '07'\n                const dateFinal = [formattedEndDate[2], monthNuber, formattedEndDate[0]].join('-'); // '2019-07-28'\n                s.endDate = new Date(dateFinal);\n            }\n        });\n\n        setLastUpd(\n            `${u.getHours()}:${u.getMinutes().toString().length < 2 ? '0' + u.getMinutes() : u.getMinutes()}:${u.getSeconds()} ${u.getDate()}-${u.getMonth() +\n                1}-${u.getFullYear()}`\n        );\n        setTourns(synchs);\n    };\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    return (\n        <div className=\"wrap\">\n            <div className=\"app\">\n                <header className=\"header\">Synchs</header>\n                <div className=\"last-update\">Last update: {lastUpd}</div>\n                <hr />\n                <main>\n                    <Synchs tourns={tourns} />\n                </main>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}